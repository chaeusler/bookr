plugins {
    id "io.spring.dependency-management" version "0.4.1.RELEASE"
    id "org.flywaydb.flyway" version "3.2"
}

apply plugin: 'war'
apply plugin: 'groovy'
apply from: "${project.gradleApplyFromPath}/plugin-jacoco.gradle"
apply from: "${project.gradleApplyFromPath}/plugin-pmd.gradle"
apply from: "${project.gradleApplyFromPath}/plugin-findbugs.gradle"
//apply from: "${project.gradleApplyFromPath}/plugin-jdepend.gradle"
//apply plugin: 'checkstyle'
//apply plugin: 'findbugs'
//apply plugin: 'jdepend'
//apply plugin: "jacoco"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()

    maven {
        // for arquillian
        url "https://repository.jboss.org/nexus/content/repositories/public"
    }
}

sourceSets {
    // defines where the sources and resource files of the integration tests are located
    integrationTest {
        groovy {
            srcDir 'src/testIntegration/groovy'
        }
    }

    test.runtimeClasspath += configurations.jacocoAnt
}

dependencyManagement {
    imports {
        mavenBom 'org.jboss.arquillian:arquillian-bom:1.1.8.Final'
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'javax:javaee-api:7.0'

    testCompile 'jdepend:jdepend:2.9.1'
    //dependencies for using spock framework
    testCompile "org.codehaus.groovy:groovy-all:2.4.1"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"//1.0-groovy-2.4"
    //testCompile "junit:junit:4.8.1"
    testCompile "org.jboss.arquillian.container:arquillian-container-test-api"//:1.1.7.Final"
    testCompile "org.jboss.arquillian.spock:arquillian-spock-container:1.0.0.Beta3"

    testCompile "org.jboss.arquillian.extension:arquillian-jacoco:1.0.0.Alpha8"
    //testCompile "org.jacoco:org.jacoco.core:${project.jacocoToolVersion}"

    //testCompile "org.jboss.arquillian.junit:arquillian-junit-container:1.1.7.Final"
    testCompile "org.wildfly:wildfly-arquillian-container-remote:8.2.0.Final"
    //testCompile "org.wildfly:wildfly-arquillian-container-embedded:8.2.0.Final"
    testCompile "org.jacoco:org.jacoco.core:0.7.4.201502262128"
    testCompile "io.undertow:undertow-websockets-jsr:1.2.6.Final"
    testCompile "org.jboss.resteasy:resteasy-client:3.0.10.Final"
    testCompile "org.jboss.resteasy:resteasy-jackson-provider:3.0.10.Final"
    testCompile "org.jboss.resteasy:resteasy-json-p-provider:3.0.10.Final"


    // flyway
    testCompile "org.postgresql:postgresql:9.4-1201-jdbc4"

    // Configures the dependency reusing those of the 'test' task.
    // This will allow reusage of JUnit and other mock libraries for instance
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

test {
    // Enable the System.out if you want
    testLogging.showStandardStreams = true

    // Before each test, log the execution detail for clarity
    beforeTest {
        descriptor -> logger.lifecycle("Running test : " + descriptor)
    }
}

task integrationTest(type: Test) {
    // more infos https://gist.github.com/notsocomplex/57ad51550842954be811

    // Enable the System.out if you want
    testLogging.showStandardStreams = true

    // Adds the integration tests classes to the test suite along with
    // the runtime classpath
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath += sourceSets.integrationTest.runtimeClasspath

    // Before each test, log the execution detail for clarity
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

/*
war {
    it.dependsOn 'test'//':AngularClient:gulp_build'
    from '../AngularClient/dist'
}*/

task deploy(dependsOn: war, type: Copy) {
    println "configure task deploy"

    from('build/libs/') {
        include '*.war'
    }

    into "${System.env.JBOSS_HOME}/standalone/deployments/"

    def target = "${project.name}.war"
    def ok = new File("${System.env.JBOSS_HOME}/standalone/deployments/${target}.deployed");
    def nok = new File("${System.env.JBOSS_HOME}/standalone/deployments/${target}.failed");

    doFirst {
        println "deploy doFirst"
        if (ok.exists()) {
            ok.delete()
        }
        if (nok.exists()) {
            nok.delete()
        }
    }

    doLast {
        println "executing wildfly deploy..."
        def deployed = false

        for (def i = 0; i < 80; i++) {
            if (ok.exists()) {
                deployed = true
                break
            }
            if (nok.exists()) {
                break
            }
            sleep(500);
        }

        if (deployed) {
            println("deploy ok.")
        } else {
            throw new RuntimeException("Deployment failed, see Wildfly logs!")
        }
    }
}

flyway {
    user = 'bookr'
    password = 'bookr'
    url='jdbc:postgresql://localhost:5432/bookr'
    //schemas = ['bookr']
}

